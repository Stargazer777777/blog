const n=JSON.parse('{"key":"v-6df443d8","path":"/notebook/TS%E7%AC%94%E8%AE%B0/10.extends%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D.html","title":"extends是什么意思","lang":"zh-CN","frontmatter":{"title":"extends是什么意思","date":"2023-09-25T00:00:00.000Z","category":["TS"],"description":"interface的继承 interface A {} interface B extends A {} 用在类型表达式中推断类型 // 如果1是number的子类型，则N为number，否则N为unknown，可拿来做类型推断。 type N = 1 extends number ? number : unknown; 对泛型进行类型约束 // T被约束成了number及其子类型 function func&lt;T extends number&gt;(a: T, b: T) { \\treturn a + b; }","head":[["meta",{"property":"og:url","content":"https:///blog/blog/notebook/TS%E7%AC%94%E8%AE%B0/10.extends%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D.html"}],["meta",{"property":"og:site_name","content":"Stargazer"}],["meta",{"property":"og:title","content":"extends是什么意思"}],["meta",{"property":"og:description","content":"interface的继承 interface A {} interface B extends A {} 用在类型表达式中推断类型 // 如果1是number的子类型，则N为number，否则N为unknown，可拿来做类型推断。 type N = 1 extends number ? number : unknown; 对泛型进行类型约束 // T被约束成了number及其子类型 function func&lt;T extends number&gt;(a: T, b: T) { \\treturn a + b; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-09-28T08:24:38.000Z"}],["meta",{"property":"article:published_time","content":"2023-09-25T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-09-28T08:24:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"extends是什么意思\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-25T00:00:00.000Z\\",\\"dateModified\\":\\"2023-09-28T08:24:38.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1695889227000,"updatedTime":1695889478000,"contributors":[{"name":"stargazer","email":"1601778118@qq.com","commits":2}]},"readingTime":{"minutes":0.36,"words":109},"filePathRelative":"notebook/TS笔记/10.extends是什么意思.md","localizedDate":"2023年9月25日","excerpt":"<ol>\\n<li>\\n<p>interface的继承</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">A</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">B</span></span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">A</span></span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>用在类型表达式中推断类型</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// 如果1是number的子类型，则N为number，否则N为unknown，可拿来做类型推断。</span>\\n<span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\"><span class=\\"token constant\\">N</span></span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">1</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\"><span class=\\"token builtin\\">number</span></span> <span class=\\"token operator\\">?</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">unknown</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>对泛型进行类型约束</p>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token comment\\">// T被约束成了number及其子类型</span>\\n<span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">func</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span><span class=\\"token constant\\">T</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token builtin\\">number</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>a<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">,</span> b<span class=\\"token operator\\">:</span> <span class=\\"token constant\\">T</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token keyword\\">return</span> a <span class=\\"token operator\\">+</span> b<span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ol>","autoDesc":true}');export{n as data};
